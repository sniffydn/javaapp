/*
 * DrawHelper.java
 *
 * Created on March 12, 2007, 9:01 AM
 */

package util;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.util.Vector;

/**
 *
 * @author  doubleD
 */
public class DrawHelper extends javax.swing.JFrame {

    ImageUtilities image = null;
    double size = 8;
    int prevPointX = -1;
    int prevPointY = -1;
    boolean first = true;
    Vector xS = new Vector();
    Vector yS = new Vector();
    Vector width = new Vector();
    Vector height = new Vector();
    Vector strings = new Vector();


    public static int offX = 0;  //sometimes 84     -109 for left shoe - 113 for right shoe
    public static int offY = 0;  //-162 for shoes
    public static int flipOffX = 113;  //normally 215 for hair          113 for shoes

    /** Creates new form DrawHelper */
    public DrawHelper()
    {
        initComponents();
        image = new ImageUtilities("G:/JavaStuff/JavaApplication1/x/ccopy.GIF");
    }

    public void paint(Graphics g)
    {
        super.paint(g);
        Graphics2D g2d = (Graphics2D)g;
        g2d.scale(size, size);


        Vector v = new Vector();
//offX?

v.add(new Color(255,24,173,255));
v.add(new Color(255,57,173,255));
v.add(new Color(255,90,173,255));
v.add(new Color(255,123,173,255));
v.add(new Color(255,156,173,255));
v.add(new Color(255,189,173,255));
v.add(new Color(206,206,206,255));
v.add(new Color(239,239,239,255));
v.add(new Color(255,255,255,255));

        Vector start = image.drawFiltered(0,0,g2d,v,first);
//        Vector start = image.drawAllFiltered(0,0,g2d,v);
        if(first)
        {
            first = false;
            xS = (Vector)start.elementAt(0);
            yS = (Vector)start.elementAt(1);
            width = (Vector)start.elementAt(2);
            height = (Vector)start.elementAt(3);
            strings = (Vector)start.elementAt(4);
        }
//        image.drawTrue(0,0,g2d,2);

        g2d.setColor(new Color(0,255,255,100));
        for(int i = 0; i < xS.size(); i++)
            g2d.fillRect(((Integer)xS.elementAt(i)).intValue(), ((Integer)yS.elementAt(i)).intValue(), ((Integer)width.elementAt(i)).intValue(), ((Integer)height.elementAt(i)).intValue());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Query Builder: Test Documents");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 132, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 52, Short.MAX_VALUE)
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
// TODO add your handling code here:
         if(evt.getButton() == evt.BUTTON1)
        {
            if(prevPointX == -1)
            {
                prevPointX = (int) (evt.getX() / size);
                prevPointY = (int) (evt.getY() / size);
            }
            else
            {
                int x = (int) (evt.getX() / size);
                int y = (int) (evt.getY() / size);

                String s = "\tg2d.fillRect(" + (prevPointX + offX) + " + x, " + (prevPointY - offY) + " + y, " + (x + 1 - prevPointX) + ", " + (y + 1 - prevPointY) + ");";
//                String s = "\tg2d.fillRect(" + (prevPointX - 18) + " + tempXpos + x, " + (prevPointY - 162) + " + tempYpos, " + (x + 1 - prevPointX) + ", " + (y + 1 - prevPointY) + ");";
                System.out.println(s);
                strings.add(s);
                xS.add(new Integer(prevPointX));
                yS.add(new Integer(prevPointY));
                width.add(new Integer(x + 1 - prevPointX));
                height.add(new Integer(y + 1 - prevPointY));

                prevPointX = -1;
                prevPointY = -1;
                this.repaint();
            }
        }
        else if(evt.getButton() == evt.BUTTON3)
        {

            System.out.println("\n\n\n\n\n\n\n********************************************************************");
            System.out.println("                                ************************************\nBACKWARDS");

            for(int i = 0; i < xS.size(); i++)
            {
                System.out.println("\t    g2d.fillRect(" + (flipOffX - (((Integer)xS.elementAt(i)).intValue()) - (((Integer)width.elementAt(i)).intValue() - 1)) + " + x, " + ((Integer)yS.elementAt(i)).intValue() + " + y, " + ((Integer)width.elementAt(i)).intValue() + ", " + ((Integer)height.elementAt(i)).intValue() + ");");
            }

            System.out.println("\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n\n");

            for(int i = 0; i < strings.size(); i++)
            {
                System.out.println(strings.elementAt(i));
            }

            System.out.println("********************************************************************");

            strings.remove(strings.size() - 1);
            xS.remove(xS.size() - 1);
            yS.remove(yS.size() - 1);
            width.remove(width.size() - 1);
            height.remove(height.size() - 1);

            prevPointX = -1;
            prevPointY = -1;
            this.repaint();
        }
    }//GEN-LAST:event_formMousePressed

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
// TODO add your handling code here:
        this.repaint();
    }//GEN-LAST:event_formComponentResized

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
// TODO add your handling code here:
//        if(evt.getButton() == evt.BUTTON1)
//        {
//            if(prevPointX == -1)
//            {
//                prevPointX = (int) (evt.getX() / size);
//                prevPointY = (int) (evt.getY() / size);
//            }
//            else
//            {
//                int x = (int) (evt.getX() / size);
//                int y = (int) (evt.getY() / size);
//
//                String s = "\tg2d.fillRect(" + (prevPointX + 0) + " + x, " + (prevPointY - 0) + " + y, " + (x + 1 - prevPointX) + ", " + (y + 1 - prevPointY) + ");";
////                String s = "\tg2d.fillRect(" + (prevPointX - 18) + " + tempXpos + x, " + (prevPointY - 162) + " + tempYpos, " + (x + 1 - prevPointX) + ", " + (y + 1 - prevPointY) + ");";
//                System.out.println(s);
//                strings.add(s);
//                xS.add(new Integer(prevPointX));
//                yS.add(new Integer(prevPointY));
//                width.add(new Integer(x + 1 - prevPointX));
//                height.add(new Integer(y + 1 - prevPointY));
//
//                prevPointX = -1;
//                prevPointY = -1;
//                this.repaint();
//            }
//        }
//        else if(evt.getButton() == evt.BUTTON3)
//        {
//
//            System.out.println("\n\n\n\n\n\n\n********************************************************************");
//            System.out.println("                                ************************************");
//
//            for(int i = 0; i < strings.size(); i++)
//            {
//                System.out.println(strings.elementAt(i));
//            }
//
//            System.out.println("********************************************************************");
//
//            strings.remove(strings.size() - 1);
//            xS.remove(xS.size() - 1);
//            yS.remove(yS.size() - 1);
//            width.remove(width.size() - 1);
//            height.remove(height.size() - 1);
//
//            prevPointX = -1;
//            prevPointY = -1;
//            this.repaint();
//        }

    }//GEN-LAST:event_formMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DrawHelper().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

}

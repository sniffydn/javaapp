/*
 * IntArrayModifier.java
 *
 * Created on October 23, 2008, 12:43 PM
 */
package draw;

import clts.Paintable;
import javax.swing.JToggleButton;
import util.GetAndSetMethodHolder;

/**
 *
 * @author  nyffeldd
 */
public class PaintableArrayModifier extends javax.swing.JPanel {

    Panel panel;
    GetAndSetMethodHolder methods;
    private JToggleButton[] panelControllers;

    /** Creates new form IntArrayModifier */
    public PaintableArrayModifier(GetAndSetMethodHolder methods, Panel p) {
        initComponents();
        this.methods = methods;
        this.panel = p;
        updateGui((Paintable[]) methods.get());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFrame1 = new javax.swing.JFrame();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();
        modPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel7 = new javax.swing.JPanel();
        panelControlPanel = new javax.swing.JPanel();
        jToggleButton1 = new javax.swing.JToggleButton();
        jPanel1 = new javax.swing.JPanel();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        jScrollPane2.setViewportView(jPanel2);

        jFrame1.getContentPane().add(jScrollPane2, java.awt.BorderLayout.CENTER);

        setLayout(new java.awt.BorderLayout());

        modPanel.setLayout(new java.awt.BorderLayout());
        add(modPanel, java.awt.BorderLayout.CENTER);

        jPanel7.setLayout(new java.awt.GridLayout(0, 1));

        panelControlPanel.setLayout(new java.awt.GridLayout(0, 1));

        jToggleButton1.setText("jToggleButton1");
        panelControlPanel.add(jToggleButton1);

        jPanel7.add(panelControlPanel);

        jScrollPane1.setViewportView(jPanel7);

        add(jScrollPane1, java.awt.BorderLayout.WEST);

        jButton5.setText("0 Out");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton5);

        jButton6.setText("RA");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton6);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Hat or Earrings", "Hair", "Makeup", "Dress", "Shirt", "TopUpperAccessory", "TopUpper", "TopLower", "BottomAccessory", "Bottom", "Strap", "Shoe", "Socks", "Platz" }));
        jPanel1.add(jComboBox1);

        jButton1.setText("Add");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1);

        jButton2.setText("Remove");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2);

        jButton3.setText("up");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton3);

        jButton4.setText("down");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton4);

        add(jPanel1, java.awt.BorderLayout.PAGE_START);
    }// </editor-fold>//GEN-END:initComponents
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            Main.moveTo.setSelected(true);
        } catch (Exception e) {
        }
        setSelectionList();
        jFrame1.setLocation(Main.DEFAULT_X_VALUE, 0);
        jFrame1.setSize(800, 400);
        jFrame1.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        Paintable[] oldObjs = (Paintable[]) methods.get();
        Paintable[] objs = new Paintable[oldObjs.length - 1];

        int index = -1;
        for (int i = 0; i < panelControllers.length; i++) {
            if (panelControllers[i].isSelected()) {
                index = i;
                break;
            }
        }

        if (index != -1) {
            int newCount = 0;
            for (int i = 0; i < oldObjs.length; i++) {
                objs[newCount] = oldObjs[i];
                if (index != i) {
                    newCount++;
                }
            }
            methods.set(objs);
            updateGui((Paintable[]) methods.get());
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        Paintable[] objs = (Paintable[]) methods.get();
        int index = -1;
        for (int i = 0; i < panelControllers.length; i++) {
            if (panelControllers[i].isSelected()) {
                index = i;
                break;
            }
        }

        if (index - 1 > -1) {
            Paintable temp = objs[index];
            objs[index] = objs[index - 1];
            objs[index - 1] = temp;
            methods.set(objs);
            updateGui((Paintable[]) methods.get());
            panelControllers[index - 1].setSelected(true);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        Paintable[] objs = (Paintable[]) methods.get();
        int index = -1;
        for (int i = 0; i < panelControllers.length; i++) {
            if (panelControllers[i].isSelected()) {
                index = i;
                break;
            }
        }

        if (index + 1 < objs.length && index != -1) {
            Paintable temp = objs[index];
            objs[index] = objs[index + 1];
            objs[index + 1] = temp;
            methods.set(objs);
            updateGui((Paintable[]) methods.get());
            panelControllers[index + 1].setSelected(true);
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        panel.rePrime();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        int index = -1;
        for (int i = 0; i < panelControllers.length; i++) {
            if (panelControllers[i].isSelected()) {
                index = i;
                break;
            }
        }
        
        if (index != -1) {
            Paintable[] objs = (Paintable[]) methods.get();
            clts.SuperC recAcc = util.CthsFactory.getRecommendedAccessory((clts.SuperC) objs[index], util.DFactory.accPrimaryArray);
            if(recAcc != null){
                addItem(recAcc);
            }            
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JPanel modPanel;
    private javax.swing.JPanel panelControlPanel;
    // End of variables declaration//GEN-END:variables
    private void updateGui(Paintable[] objs) {
        jScrollPane1.setVisible(false);
        panelControlPanel.removeAll();
        panelControllers = new JToggleButton[objs.length];
        for (int i = 0; i < objs.length; i++) {
            String s = objs[i].toString();
            s = s.substring(0, s.indexOf("("));
            JToggleButton b = new JToggleButton(s);
            b.addActionListener(new java.awt.event.ActionListener() {

                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    JToggleButton b = (JToggleButton) evt.getSource();
                    if (b.isSelected()) {
                        int index = 0;
                        for (int i = 0; i < panelControllers.length; i++) {
                            if (panelControllers[i] == b) {
                                index = i;
                            } else {
                                panelControllers[i].setSelected(false);
                            }
                        }
                        modPanel.setVisible(false);
                        modPanel.removeAll();
                        modPanel.add(new ObjectModifier(((Paintable[]) methods.get())[index]));
                        modPanel.setVisible(true);
                    }
                }
            });
            panelControllers[i] = b;
            panelControlPanel.add(b);
            jScrollPane1.setVisible(true);
        }
    }

    private void setSelectionList() {
        Paintable[] temp = null;
        jPanel2.removeAll();
        if ((jComboBox1.getSelectedItem() + "").equalsIgnoreCase("shoe")) {
            temp = util.CthsFactory.getAllShoes();
        } else if ((jComboBox1.getSelectedItem() + "").equalsIgnoreCase("platz")) {
            temp = util.CthsFactory.getAllPlatz();
        } else if ((jComboBox1.getSelectedItem() + "").equalsIgnoreCase("strap")) {
            temp = util.CthsFactory.getAllAnkleStraps();
        } else if ((jComboBox1.getSelectedItem() + "").equalsIgnoreCase("bottom")) {
            temp = util.CthsFactory.getAllBottoms();
        } else if ((jComboBox1.getSelectedItem() + "").equalsIgnoreCase("topupper")) {
            temp = util.CthsFactory.getAllTopUppers(panel.b.getMiddle());
            for (int i = 0; i < temp.length; i++) {
                ((clts.SuperC) temp[i]).setMiddle(panel.b.getMiddle());
            }
        } else if ((jComboBox1.getSelectedItem() + "").equalsIgnoreCase("dress")) {
            temp = util.CthsFactory.getAllDresses(panel.b.sMiddle);
            for (int i = 0; i < temp.length; i++) {
                ((clts.SuperC) temp[i]).setMiddle(panel.b.getMiddle());
            }
        } else if ((jComboBox1.getSelectedItem() + "").equalsIgnoreCase("shirt")) {
            temp = util.CthsFactory.getAllShirts(panel.b.sMiddle);
            for (int i = 0; i < temp.length; i++) {
                ((clts.SuperC) temp[i]).setMiddle(panel.b.getMiddle());
            }
        } else if ((jComboBox1.getSelectedItem() + "").equalsIgnoreCase("topupperaccessory")) {
            temp = util.CthsFactory.getAllTopUppersAcc();
        } else if ((jComboBox1.getSelectedItem() + "").equalsIgnoreCase("bottomaccessory")) {
            temp = util.CthsFactory.getAllBottomAccessorys();
        } else if ((jComboBox1.getSelectedItem() + "").equalsIgnoreCase("toplower")) {
            temp = util.CthsFactory.getAllTopLowers();
        } else if ((jComboBox1.getSelectedItem() + "").equalsIgnoreCase("hat or earrings")) {
            temp = util.CthsFactory.getAllHats();
        } else if ((jComboBox1.getSelectedItem() + "").equalsIgnoreCase("hair")) {
            temp = util.CthsFactory.getAllHair(util.DFactory.accTercaryArray);
        } else if ((jComboBox1.getSelectedItem() + "").equalsIgnoreCase("makeup")) {
            temp = util.CthsFactory.getAllMU();
        } else if ((jComboBox1.getSelectedItem() + "").equalsIgnoreCase("socks")) {
            temp = util.CthsFactory.getAllSocks();
        }

        SelectionHelperPanel[] labels = new SelectionHelperPanel[temp.length];

        for (int i = 0; i < temp.length; i++) {
            temp[i].setColors(util.DFactory.primaryArray.getNewColorArray());
            try {
                Class c = temp[i].getClass();
                java.lang.reflect.Method[] m = c.getMethods();
                for (int j = 0; j < m.length; j++) {
                    if (m[j].getName().equalsIgnoreCase("attributesSetUpDecreaseOriginalColorArray")) {
                        Object[] args = {};
                        m[j].invoke(temp[i], args);
                        break;
                    }
                }
            } catch (Exception exception) {
            }
            labels[i] = new SelectionHelperPanel(i, temp[i]);
            labels[i].addMouseListener(new java.awt.event.MouseAdapter() {

                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    addItem(((SelectionHelperPanel) evt.getSource()).objs);
                    jFrame1.setVisible(false);
                    try {
                        Main.moveTo.setSelected(false);
                    } catch (Exception e) {
                    }
                }
            });
            jPanel2.add(labels[i]);
        }
    }

    private void addItem(Paintable o) {
        Paintable[] old = (Paintable[]) methods.get();
        Paintable[] objs = new Paintable[old.length + 1];
        int i = 0;
        for (; i < old.length; i++) {
            objs[i] = old[i];
        }

        objs[i] = o;


        methods.set(objs);
        updateGui((Paintable[]) methods.get());
    }
}
